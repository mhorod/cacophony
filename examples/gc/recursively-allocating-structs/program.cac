# 100000 nested function calls (in 2 variants), each of which allocates 128B on the heap
# each call uses info allocated on a child call

let struct_64 = {
    a=$1, b=$2, c=$3, d=$4, e=$5, f=$6, g=$7, h=$8
};

let allocateAndIncrement = [depth: Int] -> {
    a:&Int, b:&Int, c:&Int, d:&Int, e:&Int, f:&Int, g:&Int, h:&Int
} => (
    if (depth == 0) then struct_64
    else (
        let previousStr = allocateAndIncrement[depth - 1];
        let newStr = struct_64;
        newStr.a = $(@(previousStr.a) + 1);
        newStr.b = $(@(previousStr.b) + 1);
        newStr.c = $(@(previousStr.c) + 1);
        newStr.d = $(@(previousStr.d) + 1);
        newStr.e = $(@(previousStr.e) + 1);
        newStr.f = $(@(previousStr.f) + 1);
        newStr.g = $(@(previousStr.g) + 1);
        newStr.h = $(@(previousStr.h) + 1);
        let whyNotPutThisOnHeap = $newStr;
        @whyNotPutThisOnHeap
    )
);

allocateAndIncrement[10000];

let allocateAndCopy = [depth: Int, ptr: &{
    a:&Int, b:&Int, c:&Int, d:&Int, e:&Int, f:&Int, g:&Int, h:&Int
}] -> &{
    a:&Int, b:&Int, c:&Int, d:&Int, e:&Int, f:&Int, g:&Int, h:&Int
} => (
    if (depth == 0) then ptr
    else (
        let previousPtr = allocateAndCopy[depth - 1, ptr];
        let newPtr = $(@previousPtr);
        newPtr
    )
);

allocateAndCopy[10000, $struct_64];
